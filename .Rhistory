source('C:/Users/Administrador/Google Drive/ESAD Lic En Matematicas/9. Cuatrimestre/Estadistica 3/Codigos/generaAR.R')
source('C:/Users/Administrador/Google Drive/ESAD Lic En Matematicas/9. Cuatrimestre/Estadistica 3/Codigos/ma2sim.R')
generaAR.R (100,1/2)
source('C:/Users/Administrador/Google Drive/ESAD Lic En Matematicas/9. Cuatrimestre/Estadistica 3/Codigos/generaAR.R')
generaAR.R (100,1/2)
generaAR.R (100,1/2)
generaAR.R (100,1/2)
source('C:/Users/Administrador/Google Drive/ESAD Lic En Matematicas/9. Cuatrimestre/Estadistica 3/Codigos/generaAR.R')
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.3/library")
generaAR.R (100,1/2)
generaAR.R (100,1/2)
source('C:/Users/Administrador/Google Drive/ESAD Lic En Matematicas/9. Cuatrimestre/Estadistica 3/Codigos/ma2sim.R')
plot?
()
plot() ?
dfs
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
# graficar la serie de tiempo
plot(tiempo,y,type="1")
# fin de la funcion
}
generaAR.R (100,1/2)
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
# graficar la serie de tiempo
plot(tiempo,y,type="1")
# fin de la funcion
}
generaAR.R (100,1/2)\
generaAR.R (100,1/2)
generaAR.R (100,1/2)
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
# graficar la serie de tiempo
plot(tiempo,y,type="2")
# fin de la funcion
}
generaAR.R (100,1/2)
source('C:/Users/Administrador/Google Drive/ESAD Lic En Matematicas/9. Cuatrimestre/Estadistica 3/Codigos/generaAR.R')
generaAR.R (100,1/2)
detach("package:ggplot2", unload=TRUE)
generaAR.R (100,1/2)
generaAR.R (10,1/2)
library("lattice", lib.loc="C:/Program Files/R/R-3.1.3/library")
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
# graficar la serie de tiempo
plot(tiempo,y,type = "l")
# fin de la funcion
}
generaAR.R (10,1/2)
generaAR.R (10,1/2)
generaAR.R (10,1/2)
generaAR.R (10,1/2)
generaAR.R (10,1/2)
generaAR.R (10,1/2)
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
# graficar la serie de tiempo
plot(tiempo,y,type = "o")
# fin de la funcion
}
generaAR.R (10,1/2)
generaAR.R (1000,1/2)
generaAR.R (100,1/2)
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
# graficar la serie de tiempo
plot(tiempo,y,type = "o" ylab="Global Active Power (kilowatts)", xlab="")
# fin de la funcion
}
source('~/.active-rstudio-document')
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
# graficar la serie de tiempo
plot(tiempo,y,type = "o" ylab="Global Active Power (kilowatts)", xlab="fgdfg")
# fin de la funcion
}
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
# graficar la serie de tiempo
plot(tiempo,y,type = "o" ylab="Global Active Power (kilowatts)", xlab="fgdfg")
# fin de la funcion
}
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
# graficar la serie de tiempo
plot(tiempo,y,type = "o" tiempolab="Global Active Power (kilowatts)", ylab="fgdfg")
# fin de la funcion
}
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.3/library")
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
p <- qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
p
qplot(tiempo , y , geom = "line")
qplot(tiempo , y , geom = "line")
x<- 1:10
y<- 21:30
qplot(x , y , geom = "line")
qplot(tiempo , y , geom = "line")
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
library(reshape)
library(ggplot2)
m2 <- melt(m, id = "time")
p <- ggplot(m2, aes(x = time, y = value, color = variable))
p + geom_line() + ylab("y")
detach("package:ggplot2", unload=TRUE)
install.packages("reshape")
library(reshape)
library(ggplot2)
m2 <- melt(m, id = "time")
p <- ggplot(m2, aes(x = time, y = value, color = variable))
p + geom_line() + ylab("y")
tiempo
y<- {1:9}
x<- {21:29}
cbind(x,y)
v<-cbind(x,y)
v
View(v)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
generaAR.R (100,1/2)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
source('~/.active-rstudio-document')
generaAR.R (100,1/2)
generaAR.R (10,1/2)
generaAR.R (1000,1/2)
generaAR.R (200,1/2)
source('~/.active-rstudio-document')
generaAR.R (200,1/2)
source('~/.active-rstudio-document')
generaAR.R (200,1/2)
source('~/.active-rstudio-document')
generaAR.R <- function(n,phi){
# This code generates n observations
# from an AR(1) process with autoregressive
# parameter phi and white noise variance = 1.
# The program burns mburn = 200 observations
# before the process gets to stationary conditions.
# library ggplot2
library("ggplot2")
mburn <- 200
m <- n + mburn
y <- {1:m}
tiempo <- {1:n}
# generar ruido blanco
eps <- rnorm(m)
y[1] <- eps[1]
# generar proceso AR(1) en vec y[]
for(i in {2:m}){
y[i] <- phi*y[i-1] + eps[i]
}
# tirar las primeras mburn observaciones
y <- y[(mburn+1):m]
dat<- data.frame(tiempo,y)
# graficar la serie de tiempo
ggplot(data=dat, aes(x=tiempo, y=y, group=1)) +
geom_line(colour="white", linetype="solid", size=1.5) +
geom_point(colour="red", size=4, shape=21, fill="white")
# fin de la funcion
}
generaAR.R (200,0.7)
source('~/.active-rstudio-document')
generaAR.R (200,0.7)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
generaAR.R (200,0.7)
source('~/.active-rstudio-document')
generaAR.R (200,0.7)
source('~/.active-rstudio-document')
generaAR.R (200,0.7)
source('~/.active-rstudio-document')
generaAR.R (200,0.7)
source('~/.active-rstudio-document')
generaAR.R (200,0.7)
source('~/.active-rstudio-document')
generaAR.R (200,0.7)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
generaAR.R (200,0.7)
source('~/Estadistica 3/generaAR.R')
generaAR.R (200,0.7)
source('~/Estadistica 3/generaAR.R')
source('C:/Users/Administrador/Google Drive/ESAD Lic En Matematicas/9. Cuatrimestre/Estadistica 3/Codigos/ma2sim.R')
source('~/Estadistica 3/generaAR.R')
generaAR.R (200,0.7)
